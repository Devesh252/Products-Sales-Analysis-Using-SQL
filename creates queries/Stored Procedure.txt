

-- to create stored procedure for get_monthly_gross_sales_for_customer

CREATE PROCEDURE `get_monthly_gross_sales_for_customer`(in_customer_codes TEXT)
BEGIN
select 
	fsm.date,
    	sum(fgp.gross_price*fsm.sold_quantity) as total_sales_amount  
from fact_sales_monthly fsm
join fact_gross_price fgp
on fsm.product_code = fgp.product_code and fgp.fiscal_year = get_fiscal_year(fsm.date)
where find_in_set(fsm.customer_code, in_customer_codes)>0
group by date
order by fsm.date asc;
END


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- to create stored procedure to get market badge by giving fiscal year and market

CREATE PROCEDURE `get_market_badge`(
	IN in_fy_year year, 
    	IN in_market varchar(45),
	OUT badge varchar(45)
)
BEGIN
	declare qty int default 0;

-- retrive total qty
	select 
		sum(sold_quantity) as qty
	from fact_sales_monthly fsm
	join dim_customer c 
	on fsm.customer_code = c.customer_code
	where get_fiscal_year(fsm.date) = in_fy_year and c.market = in_market
	group by  c.market;
    
-- determine badge
    if qty > 5000000 then set badge = "Gold";
    else set badge = "Silver";
    end if;

END


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- to get top n market by net sales

CREATE PROCEDURE `get_top_n_markets_by_net_sales`(
	in_fiscal_year Int,
    in_top_n int
)
BEGIN
	SELECT 
		market,
        	round(sum(net_sales)/1000000,2) as net_sales_in_millions
	FROM gdb0041.net_sales 
	where fiscal_year = in_fiscal_year
	group by market
	order by net_sales_in_millions desc
	limit in_top_n;
END


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- to get top n customer by net sales

CREATE PROCEDURE `get_top_n_customer_by_net_sales`(
	in_market varchar(45),
    	in_fiscal_year Int,
    	in_n_top Int
)
BEGIN
	SELECT 
		c.customer,
		round(sum(net_sales)/1000000,2) as net_sales_in_millions
	FROM gdb0041.net_sales ns
	join dim_customer c
	on ns.customer_code = c.customer_code
	where fiscal_year = in_fiscal_year and ns.market = in_market
	group by c.customer
	order by net_sales_in_millions desc
	limit in_n_top;

END


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- to create top n product by net sales

CREATE PROCEDURE `get_top_n_product_by_net_sales` (
	in_fiscal_year Int,
    	in_n_top Int
)
BEGIN
	SELECT 
		product,
    		round(sum(net_sales)/1000000,2) as net_sales_in_millions
	FROM gdb0041.net_sales 
	where fiscal_year = in_fiscal_year	
	group by product
	order by net_sales_in_millions desc
	limit in_n_top;
END


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--get_top n product for divisions by qty sold

CREATE PROCEDURE `get_top_n_products_per_divisions_by_qty_sold`(
	in_fiscal_year Int,
    	in_n_top Int
)
BEGIN
	with cte1 as (
		select 
			p.division, p.product,
			sum(fsm.sold_quantity) as total_qty
		from fact_sales_monthly fsm
		join dim_product p 
		on fsm.product_code = p.product_code
		where fsm.fiscal_year = in_fiscal_year
		group by p.product),
	cte2 as ( 
		select 
			*, 
			dense_rank() over(partition by division order by total_qty desc) as drnk
		from cte1
)
	select * from cte2
	where drnk<=in_n_top;
END


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- get forecast accuracy by year

CREATE PROCEDURE `get_forecast_accuracy`(
	in_fiscal_year int
)
BEGIN
	with cte1 as (
	select 
		s.customer_code,
        	sum(s.sold_quantity) as total_sold_qty,
        	sum(s.forecast_quantity) as total_forecast_qty,
        	sum((forecast_quantity-sold_quantity)) as net_error,
		sum((forecast_quantity-sold_quantity))*100/sum(forecast_quantity) as net_error_pct,
        	sum(abs(forecast_quantity-sold_quantity)) as abs_error,
        	sum(abs(forecast_quantity-sold_quantity))*100/sum(forecast_quantity) as abs_error_pct
	from fact_act_est s 
	where s.fiscal_year = in_fiscal_year
	group by customer_code
)
select 
		e.customer_code, c.customer, c.market, 
        	e.total_sold_qty, e.total_forecast_qty,
        	e.net_error, e.net_error_pct,
        	e.abs_error, e.abs_error_pct,
        	if(abs_error_pct > 100, 0, (100-abs_error_pct)) as forecast_accuracy
from cte1 e
join dim_customer c
using(customer_code)
order by forecast_accuracy desc;
END